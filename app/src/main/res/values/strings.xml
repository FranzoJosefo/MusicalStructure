<resources>
    <!-- Title for the application. [CHAR LIMIT=20] -->
    <string name="app_name">Musical Structure</string>

    <!-- Description of what the the class/API used for Login page. -->
    <string name="login_screenDescription">"For this screen I would probably use a free Authenticator API.\n\nSuch as the one provided by Firebase.</string>

    <!-- Login button text. [CHAR LIMIT=12] -->
    <string name="login_button">Sign-In</string>

    <!-- EditText username text. -->
    <string name="userName_editText">Enter username (dont)</string>

    <!-- EditText password text. -->
    <string name="password_editText">Enter password (dont)</string>

    <!-- Register button text. [CHAR LIMIT=12] -->
    <string name="register_button">Register Now!</string>

    <!-- Label for homepage. [CHAR LIMIT=12] -->
    <string name="homepage_label">Homepage</string>

    <!-- Search button text. [CHAR LIMIT=12] -->
    <string name="search_button">Search</string>

    <!-- Label for Playing Now section. [CHAR LIMIT=20] -->
    <string name="playing_label">Playing Now</string>

    <!-- Artist TextView in Playing Now section. [CHAR LIMIT=40] -->
    <string name="playingArtist_text">The Aristocrats</string>

    <!-- Song TextView in Playing Now section. [CHAR LIMIT=40] -->
    <string name="playingSong_text">Living the dream</string>

    <!-- Describes what API/Classes the activity would use -->
    <string name="playing_description">Here, the song which is current playing is displayed.\n\n
        Public class AudioManager would be used for this purpose.\n\n
        Also the Album cover would be displayed using an ImageView.\n\n
        Metadata would already be fetched by an API when the user searched for this song/album</string>

    <!-- Full Album button text. [CHAR LIMIT=20] -->
    <string name="fullAlbum_button">Go to full album</string>

    <!-- Label for Full Album section. [CHAR LIMIT=12] -->
    <string name="album_label">Full Album</string>

    <!-- Description of what the Full Album shows and the class/API used. -->
    <string name="album_screenDescription">"This screen would simply show a collection/list/array of the songs contained in this album.\n\nDuration, and option to play/download, etc. Would be displayed along with each song item in the list, using "public class ListView".\n\nThe data included in the arrays, would be fetched with a network call using an API, probably a custom one assuming we have our own server of music with an API built for this purpose."</string>

    <!-- Download Full Album button text. -->
    <string name="downloadAlbum_button">Download full album</string>

    <!-- Label for Podcast category. [CHAR LIMIT=20] -->
    <string name="podcasts_label">Recommended Podcasts</string>

    <!-- Description of what the Full Album shows and the class/API used. -->
    <string name="podcasts_screenDescription">"TBD"</string>

    <!-- Label for Go Premium section. [CHAR LIMIT=12] -->
    <string name="premium_label">Go Premium!</string>

    <!-- Description of what the Go Premium section displays and the class/API used. -->
    <string name="goPremium_description">In this screen, the user will have the chance to enroll in a premium account, so he can download music into his device, and listen to music add-free.\n\nTo achieve this, I would also use the Firebase API, specifically what is found in the following link:</string>

    <!-- Label for Settings section. [CHAR LIMIT=12] -->
    <string name="settings_label">Settings</string>

    <!-- Label for My Playlists section. [CHAR LIMIT=12] -->
    <string name="playlists_label">My Playlists</string>

    <!-- Description of what the My Playlists section shows and the class/API used. -->
    <string name="playlists_description">Using a ListView class, several playlist Objects would be displayed here within a scrollview probably.\n\n Also an API should be used to /POST and /GET all the content for each user.\n\n Something similar to the following link.</string>

    <!-- Label for Library section. [CHAR LIMIT=20] -->
    <string name="library_label">Music Library</string>
</resources>
